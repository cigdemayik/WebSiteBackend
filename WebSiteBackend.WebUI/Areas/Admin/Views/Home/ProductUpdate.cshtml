@{ Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
@model WebSiteBackend.WebUI.Areas.Admin.Models.ProductModels.ProductUpdateModel;
}

@using (Html.BeginForm("ProductUpdate", "Home", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
@Html.ValidationSummary(true)

                <div class="card">
                    <div class="card-header">
                        Konu
                    </div>
                    <div class="card-body">
                        <div class="form-group">
                            <input type="hidden" value="@Model.Id" />
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(m => m.Name, new { @class = "col-sm-3" })
                            @Html.TextBoxFor(m => m.Name, new { @class = "form-control form-control-user" })
                            @Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-danger" })
                        </div>
                        
                        <div class="form-group">
                            @Html.LabelFor(m => m.Content, new { @class = "col-sm-3" })
                            @Html.TextAreaFor(m => m.Content, new { @class = "form-control form-control-user" })
                            @Html.ValidationMessageFor(m => m.Content, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(m => m.Image, new { @class = "col-sm-3" })
                            @Html.EditorFor(m => m.Image, new { @class = "form-control form-control-user" })
                            @Html.ValidationMessageFor(m => m.Image, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.DropDownListFor(m => m.Language, new List<SelectListItem>{
                new SelectListItem {Text="Türkçe",Value="1"},
                new SelectListItem {Text="İngilizce",Value="2"}
            }, new { @class = "form-control form-control-user" })
                            @Html.ValidationMessageFor(m => m.Language, "", new { @class = "text-danger" })
                        </div>

                        <input type="submit" value="Güncelle" class="btn btn-primary" />
                    </div>
                </div>}
@section Scripts{

    <script src="~/build/ckeditor.js"></script>


    <script>

				class MyUploadAdapter {
		constructor( loader ) {
			// The file loader instance to use during the upload. It sounds scary but do not
			// worry — the loader will be passed into the adapter later on in this guide.
			this.loader = loader;
		}


			upload() {
			return this.loader.file
				.then( file => new Promise( ( resolve, reject ) => {
					this._initRequest();
					this._initListeners( resolve, reject, file );
					this._sendRequest( file );
				} ) );
		}

		// Aborts the upload process.
		abort() {
			if ( this.xhr ) {
				this.xhr.abort();
			}
		}
		// Initializes the XMLHttpRequest object using the URL passed to the constructor.
		_initRequest() {
			const xhr = this.xhr = new XMLHttpRequest();

			// Note that your request may look different. It is up to you and your editor
			// integration to choose the right communication channel. This example uses
			// a POST request with JSON as a data structure but your configuration
			// could be different.
			xhr.open( 'POST', '@Url.Action("UploadImage","Home")', true );
			xhr.responseType = 'json';
		}
		// Initializes XMLHttpRequest listeners.
		_initListeners( resolve, reject, file ) {
			const xhr = this.xhr;
			const loader = this.loader;
			const genericErrorText = `Couldn't upload file: ${ file.name }.`;

			xhr.addEventListener( 'error', () => reject( genericErrorText ) );
			xhr.addEventListener( 'abort', () => reject() );
			xhr.addEventListener( 'load', () => {
				const response = xhr.response;

				// This example assumes the XHR server's "response" object will come with
				// an "error" which has its own "message" that can be passed to reject()
				// in the upload promise.
				//
				// Your integration may handle upload errors in a different way so make sure
				// it is done properly. The reject() function must be called when the upload fails.
				if ( !response || response.error ) {
					return reject( response && response.error ? response.error.message : genericErrorText );
				}

				// If the upload is successful, resolve the upload promise with an object containing
				// at least the "default" URL, pointing to the image on the server.
				// This URL will be used to display the image in the content. Learn more in the
				// UploadAdapter#upload documentation.
				resolve( {
					default: response.url
				} );
			} );

			// Upload progress when it is supported. The file loader has the #uploadTotal and #uploaded
			// properties which are used e.g. to display the upload progress bar in the editor
			// user interface.
			if ( xhr.upload ) {
				xhr.upload.addEventListener( 'progress', evt => {
					if ( evt.lengthComputable ) {
						loader.uploadTotal = evt.total;
						loader.uploaded = evt.loaded;
					}
				} );
			}
		}
		 // Prepares the data and sends the request.
		_sendRequest( file ) {
			// Prepare the form data.
			const data = new FormData();

			data.append( 'upload', file );

			// Important note: This is the right place to implement security mechanisms
			// like authentication and CSRF protection. For instance, you can use
			// XMLHttpRequest.setRequestHeader() to set the request headers containing
			// the CSRF token generated earlier by your application.

			// Send the request.
			this.xhr.send( data );
		}
	}

	function MyCustomUploadAdapterPlugin( editor ) {
		editor.plugins.get( 'FileRepository' ).createUploadAdapter = ( loader ) => {
			// Configure the URL to the upload script in your back-end here!
			return new MyUploadAdapter( loader );
		};
	}


				ClassicEditor.create( document.querySelector( '#Content' ), {
					extraPlugins: [ MyCustomUploadAdapterPlugin ],
					toolbar: {
						items: [
							'heading',
							'|',
							'fontColor',
							'fontFamily',
							'fontSize',
							'bold',
							'italic',
							'alignment',
							'codeBlock',
							'|',
							'numberedList',
							'bulletedList',
							'link',
							'|',
							'outdent',
							'indent',
							'|',
							'imageUpload',
							'blockQuote',
							'insertTable',
							'mediaEmbed',
							'undo',
							'redo'
						]
					},
					language: 'tr',
					image: {
						toolbar: [
							'imageTextAlternative',
							'imageStyle:inline',
							'imageStyle:block',
							'imageStyle:side'
						]
					},
					table: {
						contentToolbar: [
							'tableColumn',
							'tableRow',
							'mergeTableCells'
						]
					},
						licenseKey: '',



					} )
					.then( editor => {
						window.editor = editor;




					} )
					.catch( error => {
						console.error( 'Oops, something went wrong!' );
						console.error( 'Please, report the following error on https://github.com/ckeditor/ckeditor5/issues with the build id and the error stack trace:' );
						console.warn( 'Build id: fdgu51bobskf-84ezib4fqubo' );
						console.error( error );
					} );
    </script>
}